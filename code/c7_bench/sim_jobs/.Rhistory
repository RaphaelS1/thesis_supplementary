color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
p = vis(load_Sim20(2000, 20 * 3000))
p$time
test_sim(20, 50) # Non-PH, Type I, 50% - FIXME
library(gridExtra)
vis = function(data) {
data$sexF = factor(data$sexF)
data$trt = factor(data$trt)
data$status = factor(data$status)
ret = list()
p = ggplot(data)
ret$sex = p + geom_bar(aes(y = (..count..)/sum(..count..), x = sexF, fill = sexF))
ret$trt = p + geom_bar(aes(y = (..count..)/sum(..count..), x = trt, fill = trt))
ret$age = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = age), color = "black", fill = "blue", alpha = 0.3)
ret$stat = p + geom_bar(aes(y = (..count..)/sum(..count..), x = status, fill = status))
ret$time = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = time,
group = status, fill = status, color = status),
alpha = 0.3)
p1 = geom_line(aes(x = age, y = time))
p2 = geom_line(aes(x = sexF, y = time))
p3 = geom_line(aes(x = trt, y = time))
ret$timevs = grid.arrange(p1,p2,p3)
df = as.matrix(data[,4:13])
cor = Hmisc::rcorr(df, type = "spearman")
cor$P[is.na(cor$P)] = 0
cor$P = matrix(round(p.adjust(cor$P, method = "BH"), 2), nrow = nrow(cor$r),
ncol = ncol(cor$r), dimnames = dimnames(cor$r))
meltedcor = reshape2::melt(cor$r)
meltedP = reshape2::melt(cor$P)
meltedcor$value[meltedP$value > 0.05] = 0
meltedP = meltedP[meltedP$value > 0.05, ]
ret$cor = ggplot(data = meltedcor, aes(x = Var1,y = Var2, fill = value)) +
geom_tile() + theme_minimal() +
scale_fill_gradient2(low = "white", high = "red",
mid = "pink", midpoint = 0.5,
limit = c(0,1), space = "Lab",
name="Spearman\nCorrelation") +
geom_text(data = meltedP, aes(x = Var1, y = Var2, label = "x"),
color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
p = vis(load_Sim20(2000, 20 * 3000))
?grid.arrange
vis = function(data) {
data$sexF = factor(data$sexF)
data$trt = factor(data$trt)
data$status = factor(data$status)
ret = list()
p = ggplot(data)
ret$sex = p + geom_bar(aes(y = (..count..)/sum(..count..), x = sexF, fill = sexF))
ret$trt = p + geom_bar(aes(y = (..count..)/sum(..count..), x = trt, fill = trt))
ret$age = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = age), color = "black", fill = "blue", alpha = 0.3)
ret$stat = p + geom_bar(aes(y = (..count..)/sum(..count..), x = status, fill = status))
ret$time = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = time,
group = status, fill = status, color = status),
alpha = 0.3)
p1 = p + geom_line(aes(x = age, y = time))
p2 = p + geom_line(aes(x = sexF, y = time))
p3 = p + geom_line(aes(x = trt, y = time))
ret$timevs = grid.arrange(p1,p2,p3)
df = as.matrix(data[,4:13])
cor = Hmisc::rcorr(df, type = "spearman")
cor$P[is.na(cor$P)] = 0
cor$P = matrix(round(p.adjust(cor$P, method = "BH"), 2), nrow = nrow(cor$r),
ncol = ncol(cor$r), dimnames = dimnames(cor$r))
meltedcor = reshape2::melt(cor$r)
meltedP = reshape2::melt(cor$P)
meltedcor$value[meltedP$value > 0.05] = 0
meltedP = meltedP[meltedP$value > 0.05, ]
ret$cor = ggplot(data = meltedcor, aes(x = Var1,y = Var2, fill = value)) +
geom_tile() + theme_minimal() +
scale_fill_gradient2(low = "white", high = "red",
mid = "pink", midpoint = 0.5,
limit = c(0,1), space = "Lab",
name="Spearman\nCorrelation") +
geom_text(data = meltedP, aes(x = Var1, y = Var2, label = "x"),
color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
p = vis(load_Sim20(2000, 20 * 3000))
p$timevs
vis = function(data) {
data$sexF = factor(data$sexF)
data$trt = factor(data$trt)
data$status = factor(data$status)
ret = list()
p = ggplot(data)
ret$sex = p + geom_bar(aes(y = (..count..)/sum(..count..), x = sexF, fill = sexF))
ret$trt = p + geom_bar(aes(y = (..count..)/sum(..count..), x = trt, fill = trt))
ret$age = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = age), color = "black", fill = "blue", alpha = 0.3)
ret$stat = p + geom_bar(aes(y = (..count..)/sum(..count..), x = status, fill = status))
ret$time = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = time,
group = status, fill = status, color = status),
alpha = 0.3)
p1 = p + geom_point(aes(x = age, y = time))
p2 = p + geom_point(aes(x = sexF, y = time))
p3 = p + geom_point(aes(x = trt, y = time))
ret$timevs = grid.arrange(p1,p2,p3)
df = as.matrix(data[,4:13])
cor = Hmisc::rcorr(df, type = "spearman")
cor$P[is.na(cor$P)] = 0
cor$P = matrix(round(p.adjust(cor$P, method = "BH"), 2), nrow = nrow(cor$r),
ncol = ncol(cor$r), dimnames = dimnames(cor$r))
meltedcor = reshape2::melt(cor$r)
meltedP = reshape2::melt(cor$P)
meltedcor$value[meltedP$value > 0.05] = 0
meltedP = meltedP[meltedP$value > 0.05, ]
ret$cor = ggplot(data = meltedcor, aes(x = Var1,y = Var2, fill = value)) +
geom_tile() + theme_minimal() +
scale_fill_gradient2(low = "white", high = "red",
mid = "pink", midpoint = 0.5,
limit = c(0,1), space = "Lab",
name="Spearman\nCorrelation") +
geom_text(data = meltedP, aes(x = Var1, y = Var2, label = "x"),
color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
p = vis(load_Sim20(2000, 20 * 3000))
df = load_Sim20(2000, 20*3000)
plot(df$age, df$time)
df = load_Sim2(2000, 20*3000)
plot(df$age, df$time)
df = load_Sim5(2000, 20*3000)
plot(df$age, df$time)
df = load_Sim13(2000, 20*3000)
plot(df$age, df$time)
plot(df$sex, df$time)
plot(df$trt, df$time)
test_sim(13, 20) # PH, Right, 20%
plot(df$trt, df$time[df$status==1])
plot(df$trt[df$status==1], df$time[df$status==1])
boxplot(df$trt[df$status==1], df$time[df$status==1])
boxplot(df$trt[df$status==0], df$time[df$status==0])
vis = function(data) {
data$sexF = factor(data$sexF)
data$trt = factor(data$trt)
data$status = factor(data$status)
ret = list()
p = ggplot(data)
ret$sex = p + geom_bar(aes(y = (..count..)/sum(..count..), x = sexF, fill = sexF))
ret$trt = p + geom_bar(aes(y = (..count..)/sum(..count..), x = trt, fill = trt))
ret$age = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = age), color = "black", fill = "blue", alpha = 0.3)
ret$stat = p + geom_bar(aes(y = (..count..)/sum(..count..), x = status, fill = status))
ret$time = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = time,
group = status, fill = status, color = status),
alpha = 0.3)
p1 = p + geom_point(aes(x = age, y = time))
p2 = p + geom_violin(aes(x = sexF, y = time))
p3 = p + geom_violin(aes(x = trt, y = time))
ret$timevs = grid.arrange(p1,p2,p3)
df = as.matrix(data[,4:13])
cor = Hmisc::rcorr(df, type = "spearman")
cor$P[is.na(cor$P)] = 0
cor$P = matrix(round(p.adjust(cor$P, method = "BH"), 2), nrow = nrow(cor$r),
ncol = ncol(cor$r), dimnames = dimnames(cor$r))
meltedcor = reshape2::melt(cor$r)
meltedP = reshape2::melt(cor$P)
meltedcor$value[meltedP$value > 0.05] = 0
meltedP = meltedP[meltedP$value > 0.05, ]
ret$cor = ggplot(data = meltedcor, aes(x = Var1,y = Var2, fill = value)) +
geom_tile() + theme_minimal() +
scale_fill_gradient2(low = "white", high = "red",
mid = "pink", midpoint = 0.5,
limit = c(0,1), space = "Lab",
name="Spearman\nCorrelation") +
geom_text(data = meltedP, aes(x = Var1, y = Var2, label = "x"),
color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
vis(load_Sim20(2000,2000*3000))
p=vis(load_Sim20(2000,2000*3000))
p=vis(load_Sim2(2000,2000*3000))
vis = function(data) {
data$sexF = factor(data$sexF)
data$trt = factor(data$trt)
data$status = factor(data$status)
ret = list()
p = ggplot(data)
ret$sex = p + geom_bar(aes(y = (..count..)/sum(..count..), x = sexF, fill = sexF))
ret$trt = p + geom_bar(aes(y = (..count..)/sum(..count..), x = trt, fill = trt))
ret$age = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = age), color = "black", fill = "blue", alpha = 0.3)
ret$stat = p + geom_bar(aes(y = (..count..)/sum(..count..), x = status, fill = status))
ret$time = p + geom_histogram(aes(y = (..count..)/sum(..count..), x = time,
group = status, fill = status, color = status),
alpha = 0.3)
p1 = p + geom_point(aes(x = age, y = time))
p2 = p + geom_boxplot(aes(x = sexF, y = time))
p3 = p + geom_boxplot(aes(x = trt, y = time))
ret$timevs = grid.arrange(p1,p2,p3)
df = as.matrix(data[,4:13])
cor = Hmisc::rcorr(df, type = "spearman")
cor$P[is.na(cor$P)] = 0
cor$P = matrix(round(p.adjust(cor$P, method = "BH"), 2), nrow = nrow(cor$r),
ncol = ncol(cor$r), dimnames = dimnames(cor$r))
meltedcor = reshape2::melt(cor$r)
meltedP = reshape2::melt(cor$P)
meltedcor$value[meltedP$value > 0.05] = 0
meltedP = meltedP[meltedP$value > 0.05, ]
ret$cor = ggplot(data = meltedcor, aes(x = Var1,y = Var2, fill = value)) +
geom_tile() + theme_minimal() +
scale_fill_gradient2(low = "white", high = "red",
mid = "pink", midpoint = 0.5,
limit = c(0,1), space = "Lab",
name="Spearman\nCorrelation") +
geom_text(data = meltedP, aes(x = Var1, y = Var2, label = "x"),
color = "red") +
theme(axis.title = element_blank(),
axis.text.y = element_text(angle = 45),
axis.text.x = element_text(angle = 45, vjust = 0.8, hjust = 0.7))
return(ret)
}
?grid.arrange
p=vis(load_Sim2(2000,2000*3000))
p=vis(load_Sim6(2000,2000*3000))
p=vis(load_Sim10(2000,2000*3000))
p=vis(load_Sim19(2000,2000*3000))
p=vis(load_Sim28(2000,2000*3000))
p=vis(load_Sim36(2000,2000*3000))
?rweibull
source('~/Documents/Academia/PhD/thesis_papers/Thesis/code/C6_Bench/simulation/sim_jobs/gen_simulated_data.R')
test_sim(1, 20) # PH, Type I, 20%
test_sim = function(i, p_cens, visual = FALSE) {
data = do.call(paste0("load_Sim", i), list(n = 2000, seed = i * 3000))
ret = list()
if (sum(coefficients(summary(lm(time ~ .-status, data = data[data$status == 1,])))[,4] < 0.05) >= 3)
ret$lm_surv_time = "Survival time CAN be predicted"
else
ret$lm_surv_time = "!!Survival time canNOT be predicted!!"
if (sum(coefficients(summary(lm(time ~ .-status, data = data[data$status == 0,])))[,4] < 0.05) >= 3)
ret$lm_cens_time = "Censoring time CAN be predicted"
else
ret$lm_cens_time = "!!Censoring time canNOT be predicted!!"
if (chisq.test(data$status, (1 - rbinom(2000, 1, p_cens/100)))$p.value > 0.05)
ret$status = paste0("Proportion of censoring as expected, p = ", as.numeric(proportions(table(data$status))[1]))
else
ret$status =  paste0("!!Proportion of censoring NOT as expected!!, p = ", as.numeric(proportions(table(data$status))[1]))
if (cox.zph(coxph(Surv(time, status) ~ ., data = data))$table[14,3] > 0.05)
ret$ph = "Data is PH"
else
ret$ph = "Data is NOT PH"
if (length(unique(data$time[data$status == 0])) == 1)
ret$typei = "Type I Censoring"
else
ret$typei = "NOT Type I Censoring"
if (sum(coefficients(summary(glm(status ~ .-time, data = data, family = "binomial")))[,4] < 0.05) >= 3)
ret$glm_status = "Censoring is informative"
else
ret$glm_status = "Censoring is NOT informative"
if (visual) {
graphics::par(ask = ask)
plot(sort(data$time))
}
return(ret)
}
test_sim(1, 20) # PH, Type I, 20%
test_sim(2, 50) # PH, Type I, 50%
test_sim(3, 80) # PH, Type I, 80%
test_sim(4, 20) # PH, Right, 20%
test_sim(5, 50) # PH, Right, 50%
test_sim(6, 80) # PH, Right, 80%
test_sim(7, 20) # PH, Indep, 20%
test_sim(8, 50) # PH, Indep, 50%
test_sim(9, 80) # PH, Indep, 80%
test_sim(10, 20) # PH, Type I, 20%
test_sim(11, 50) # PH, Type I, 50%
test_sim(12, 80) # PH, Type I, 80%
test_sim(13, 20) # PH, Right, 20%
test_sim(14, 50) # PH, Right, 50%
test_sim(15, 80) # PH, Right, 80%
test_sim(16, 20) # PH, Indep, 20%
test_sim(17, 50) # PH, Indep, 50%
test_sim(18, 80) # PH, Indep, 80%
test_sim(19, 20) # Non-PH, Type I, 20%
test_sim(20, 50) # Non-PH, Type I, 50% - FIXME
test_sim(21, 80) # Non-PH, Type I, 80%
test_sim(22, 20) # Non-PH, Right, 20%
test_sim(23, 50) # Non-PH, Right, 50%
test_sim(24, 80) # Non-PH, Right, 80%
test_sim(25, 20) # Non-PH, Indep, 20%
test_sim(26, 50) # Non-PH, Indep, 50%
test_sim(27, 80) # Non-PH, Indep, 80%
test_sim(28, 20) # Non-PH, Type I, 20%
test_sim(29, 50) # Non-PH, Type I, 50%
test_sim(30, 80) # Non-PH, Type I, 80%
test_sim(31, 20) # Non-PH, Right, 20%
test_sim(30, 80) # Non-PH, Type I, 80%
test_sim(32, 50) # Non-PH, Right, 50%
test_sim(33, 80) # Non-PH, Right, 80%
test_sim(31, 20) # Non-PH, Right, 20%
test_sim(32, 50) # Non-PH, Right, 50%
test_sim(33, 80) # Non-PH, Right, 80%
test_sim(34, 20) # Non-PH, Indep, 20%
test_sim(35, 50) # Non-PH, Indep, 50%
test_sim(36, 80) # Non-PH, Indep, 80%
library(mlr3)
library(mlr3proba)
m = list(msr("surv.calib_alpha", id = "vanA"), msr("surv.calib_alpha", id = "vanA_se", se = TRUE),
#    msr("surv.calib_beta", id = "vanB"), msr("surv.calib_beta", id = "vanB_se", se = TRUE),
msr("surv.cindex", id = "C_Harrell"),
msr("surv.cindex", weight_meth = "G2", id = "C_Uno"),
msr("surv.cindex", weight_meth = "GH", id = "C_Gonen"),
msr("surv.graf", id = "IGS"), #msr("surv.graf", se = TRUE, id = "IGS_se"),
msr("surv.intlogloss", id = "ILL"), # msr("surv.intlogloss", se = TRUE, id = "ILL_se"),
msr("surv.logloss", id = "SDLL"), #msr("surv.logloss", se = TRUE, id = "SDLL_se"),
msr("surv.rmse", id = "RMSE"), #msr("surv.rmse", se = TRUE, id = "RMSE_se"),
msr("surv.mae", id = "MAE"))#, msr("surv.mae", se = TRUE, id = "MAE_se"))
l= lrn("surv.kaplan")
t = tsk("rats")
t = tgen("simsurv")$generate(30)
b = benchmark(benchmark_grid(t,l,rsmp("holdout")))
p = b$score(m)
p
p[,c(5,10:26)]
colnames(p)
p[,c(5,10:19)]
2
log(2)
10
log(10)
log(Inf)
log(1000)
library(distr6)
pdelta = Gamma$new()
pdelta = Gamma$new()
d = Exponential$new()
p = Weibull$new()
lhs = function(x) pdelta$pdf(x) * d$pdf(x)
integrate(lhs, 0, Inf)
rhs = function(x) pdelta$pdf(x) * log(p$pdf(x))
integrate(rhs, 0, Inf)
log(0)
integrate(rhs, 1e-15, Inf)
integrate(rhs, 1e-5, Inf)
integrate(rhs, 1, Inf)
integrate(rhs, 2, Inf)
p$pdf(0)
p$pdf(01
p$pdf(1)
p$pdf(2)
p$pdf(10)
integrate(rhs, 0, 10)
integrate(lhs, 0, Inf)
integrate(rhs, 0, 10)
integrate(lhs, 0, 10)
integrate(rhs, 0, 10)
lhs = function(x) pdelta$pdf(x) * log(d$pdf(x))
integrate(lhs, 0, 10)
rhs = function(x) pdelta$pdf(x) * log(p$pdf(x))
integrate(rhs, 0, 10)
p = Weibull$new(scale = 2)
lhs = function(x) pdelta$pdf(x) * log(d$pdf(x))
integrate(lhs, 0, 10)
rhs = function(x) pdelta$pdf(x) * log(p$pdf(x))
integrate(rhs, 0, 10)
kl = function(x) log(pdelta$pdf(x) * (d$pdf(x)/p$pdf(x)))
integrate(rhs, 0, 10)
kl = function(x) log(pdelta$pdf(x) * (p$pdf(x)/p$pdf(x)))
integrate(rhs, 0, 10)
kl = function(x) log(pdelta$pdf(x) * (d$pdf(x)/p$pdf(x)))
integrate(kl, 0, 10)
kl = function(x) log(pdelta$pdf(x) * (p$pdf(x)/p$pdf(x)))
integrate(kl, 0, 10)
integrate(kl, 0, 100)
integrate(kl, 0, Inf)
integrate(kl, 0, 500)
log((2*exp(5))/(3*exp(6)))
log(2/3) *  5/6
log(2/3) *  (5/6)
log(2*5) == log(2) + log(5)
log(2+5) == log(2) * log(5)
log(2+5)
log(2) * log(5)
log(2) + log(5)
log(2*5)
log((2*exp(5))/(3*exp(6)))
log(2/3) +  (5/6)
log((2 * exp(5))/(3 * exp(6)))
log((2 * exp(5))/(3 * exp(6)))
log(2) + 5 - log(3) - 6
log(2/3) + 5 - 6
log((2 * exp(5))/(3 * exp(6)))
log(2/3) + 5 - 6
log(2) - log(3) + 5 - 6
log(2/3)
log(4/3)
function(y) exp(-y) * (log((2*exp(-2*y))/(3*exp(-3*y))))
int = function(y) exp(-y) * (log((2*exp(-2*y))/(3*exp(-3*y))))
integrate(int, 0, Inf)
integrate(int, 0, 10)
log(2/3)
int = function(y) exp(-y) * (log((2*exp(-2*y))/(3*exp(-3*y))))
integrate(int, 0, 10)
integrate(int, 0, 50)
log(2/3)
int = function(y) exp(-y) * (log((2*exp(-2*y))/(3*exp(-3*y))))
integrate(int, 0, 50)
int = function(y) exp(-y) * (log(2/3) - 2*y + 3*y)
integrate(int, 0, 50)
k = 3; mu = 2
int = function(y) exp(-y) * (log(mu/k) + y(k - mu))
integrate(int, 0, 50)
k = 3; mu = 2
int = function(y) exp(-y) * (log(mu/k) + y(k - mu))
integrate(int, 0, 50)
int = function(y) exp(-y) * (log(mu/k) + y*(k - mu))
integrate(int, 0, 50)
int = function(y) exp(-y) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
int = function(y) exp(-y) * (log(mu/k) + y*(k - mu))
integrate(int, 0, 50)
int1 = function(y) exp(-y) * (log(mu/k))
int2 = function(y) exp(-y) * (y*(k - mu))
integrate(int1, 0, 50) + integrate(int2, 0, 50)
integrate(int1, 0, 50)$value
integrate(int1, 0, 50)$value + integrate(int2, 0, 50)$value
integrate(int, 0, 50)$value
int1 = function(y) exp(-y) * (log(mu/k))
int2 = function(y) exp(-y) * (y*(k - mu))
integrate(int1, 0, 50)$value + integrate(int2, 0, 50)$value
i = integrate(int, 0, 50)$value
int2 = function(y) exp(-y)
integrate(int2, 0, 50)
int1 = function(y) exp(-y)
int2 = function(y) exp(-y) * (y*(k - mu))
log(mu/k) * integrate(int1, 0, 50)$value + integrate(int2, 0, 50)$value # 0.5945349
int2 = function(y) exp(-y) * y
log(mu/k) * integrate(int1, 0, 50)$value + (k-mu) * integrate(int2, 0, 50)$value # 0.5945349
log(mu/k) + (k-mu) * integrate(int2, 0, 50)$value # 0.5945349
int2 = function(y) exp(-y) * y
log(mu/k) + (k-mu) * integrate(int2, 0, 50)$value # 0.5945349
integrate(function(x) 1, 0, Inf)
integrate(function(x) 1, 0, 10)
integrate(function(x) rep(1,length(x)), 0, 10)
integrate(function(x) rep(1,length(x)), 0, Inf)
log(mu/k) + (k-mu) * integrate(int2, 0, 50)$value # 0.5945349
log(mu/k)
log(mu/k)+ (mu-k)
log(mu/k)+ (k-mu)
int = function(y) exp(-y*lambda*exp(-lambda*y)) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
k = 3; mu = 2; lambda = 5
int = function(y) exp(-y*lambda*exp(-lambda*y)) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
integrate(int, 0, 50)$value
log(mu/k) + (k-mu)
int = function(y) exp(lambda*exp(-lambda*y)) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
integrate(int, 0, 50)$value
k = 3; mu = 2; lambda = 5
int = function(y) exp(lambda*exp(-lambda*y)) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
integrate(int, 0, 50)$value
integrate(int, 0, Inf)$value
integrate(int, 0, 50)$value
log(mu/k) + (k-mu)
log(mu/k) + (k-mu)/lambda
int = function(y) lambda*exp(-lambda*y) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
integrate(int, 0, 50)$value
log(mu/k) + (k-mu)/lambda
int = function(y) lambda*exp(-lambda*y) * (log((mu*exp(-mu*y))/(k*exp(-k*y))))
integrate(int, 0, 50)$value
log(mu/k) + (k-mu)/lambda
lambda = 1; k = 3; mu = 4
log(mu/k) + (k-mu)/lambda
-2 * 10 - -2*8
(-2 * 10 - -2*8) > 0
(-2 * 5 - -2*8) > 0
10 - 8 > 0
5 - 8 > 0
-(0.5) * (log(0.5) + 1)
-(0.1) * (log(0.5) + 1)
-(0.9) * (log(0.5) + 1)
-(0.5) * (log(0.5) + 1)
lambda = 1; k = 3; mu = 4; q = 0.5
log(mu/k) + (k-mu)/lambda
-q * (log(mu/k) + (k-mu)/lambda)
lambda = 1; k = 2; mu = 4; q = 0.5
-q * (log(mu/k) + (k-mu)/lambda)
lambda = 1; k = 2; mu = 1; q = 0.5
-q * (log(mu/k) + (k-mu)/lambda)
lambda = 1; k = 2; mu = 2; q = 0.5
-q * (log(mu/k) + (k-mu)/lambda)
lambda = 1; k = 2; mu = 3; q = 0.5
-q * (log(mu/k) + (k-mu)/lambda)
-q * (log(mu/k) + (k-mu)/lambda)
-0.5 * (log(3/2)-1)
pdelta = Exponential$new(3)
d = Exponential$new(3)
p = Exponential$new(2)
lhs = function(x) pdelta$pdf(x) * log(d$pdf(x))
integrate(lhs, 0, 10)
rhs = function(x) pdelta$pdf(x) * log(p$pdf(x))
integrate(rhs, 0, 10)
kl = function(x) log(pdelta$pdf(x) * (d$pdf(x)/p$pdf(x)))
integrate(kl, 0, 500)
integrate(kl, 0, 10)
library(distr6)
kern <- Tricube$new(decorators = "ExoticStatistics")
kern <- Tricube$new(decorators = "ExoticStatistics")
expect_rounded_equal(kern$cdfPNorm(2, upper = 2)^2, kern$cdfSquared2Norm(upper = 2), 4)
