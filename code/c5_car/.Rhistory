s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 4, scale = 100, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3, scale = 100, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3.5, scale = 100, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3.8, scale = 100, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3.8, scale = 90, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3.8, scale = 95, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
s0 = distr6::Weibull$new(shape = 3.8, scale = 98, decorators = "ExoticStatistics")
s_comp = data.frame(x = 1:100, y = s0$survival(1:100/(1 + exp(lp[1]))), Distr = "Comp")
s_km = plot(lrn("surv.kaplan")$train(task, row_ids = test)$predict(task, row_ids = test)$distr[1],
fun = "surv", plot = FALSE)[,c(1,3)]
colnames(s_km) = c("x", "y")
s_km$Distr = "KM"
data = rbind(s_comp, s_km)
ggplot(data = data, aes(x = x, y = y, colour = Distr)) + geom_line() + geom_point() + theme_minimal() +
labs(y = "S(x)") + xlim(0, 99) + ylim(0.85, 1)
unloadNamespace("apcluster")
remove.packages("apcluster")
remove.packages("apcluster")
library(mlr3)
library(mlr3learners)
library(mlr3extralearners)
library(mlr3proba)
library(mlr3cluster)
keys = mlr3::mlr_learners$keys()
all_lrns = suppressWarnings(mlr3::lrns(keys))
mlr3learners_table = data.table::data.table(t(data.table::rbindlist(list(
mlr3misc::map(all_lrns, function(.x) {
idsplt = strsplit(.x$id, ".", TRUE)[[1]]
list(idsplt[[2]], idsplt[[1]], .x$id, strsplit(.x$man, "::", TRUE)[[1]][1],
.x$packages, .x$properties, .x$feature_types, .x$predict_types)
})))))
colnames(mlr3learners_table) = c("name", "class", "id", "mlr3_package", "required_packages",
"properties", "feature_types", "predict_types")
mlr3learners_table[, 1:4] = lapply(mlr3learners_table[, 1:4], as.character)
mlr3learners_table[mlr3learners_table$class == "clust", "mlr3_package"] = "mlr3cluster"
?cranlogs::cran_downloads
x-cran_downloads("distributional", from = "2010-01-01")
x=cran_downloads("distributional", from = "2010-01-01")
x=cranlogs::cran_downloads("distributional", from = "2010-01-01")
x
plot(x$count)
sum(x$count)
plot(cranlogs::cran_downloads("distributional", from = "2010-01-01")$count)
plot(cranlogs::cran_downloads("distributional", from = "2016-01-01")$count)
plot(cranlogs::cran_downloads("distributional", from = "2019-01-01")$count)
plot(cranlogs::cran_downloads("distributional", from = "2020-01-01")$count)
x = cranlogs::cran_downloads("distributional", from = "2020-01-01")
x
sum(x$count)
x = cranlogs::cran_downloads("distr6", from = "2017-01-01")
sum(x$count)
library(distr6)
rep(Binomial$new())
rep(Binomial$new(), 5)
rep(Binomial$new(), 5, type = "mixture")
rep(Binomial$new(), 5, type = "mixture")
?rep.Distributin
?rep.Distribution
m=rep(Binomial$new(), 5, class = "mixture")
decorate(m, "FunctionImputation")
m
m$quantile(0.4)
f = function(x, y)
f = function(x, y) {
}
f = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
}
f(1:100, 1:100, 5, 10)
f1 = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
}
f2 = function(x, y, lower, upper) {
which = x>lower & x < upper
y <- numeric(length(x))
y[which] <- (x[which]-y[which])/(x[which]+y[which])
}
f(1:100, 1:100, 5, 10)
f1(1:100, 1:100, 5, 10)
f2(1:100, 1:100, 5, 10)
microbenchmark::microbenchmark(
f1(1:100, 1:100, 5, 10),
f2(1:100, 1:100, 5, 10)
)
microbenchmark::microbenchmark(
f1(1:1000, 1:1000, 5, 10),
f2(1:1000, 1:1000, 5, 10)
)
?microbenchmark
microbenchmark::microbenchmark(
f1(1:1000, 1:1000, 5, 10),
f2(1:1000, 1:1000, 5, 10),
check = "equal"
)
f1(1:1000, 1:1000, 5, 10)
f1 = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
return(y)
}
f2 = function(x, y, lower, upper) {
which = x>lower & x < upper
y <- numeric(length(x))
y[which] <- (x[which]-y[which])/(x[which]+y[which])
return(y)
}
microbenchmark::microbenchmark(
f1(1:1000, 1:1000, 5, 10),
f2(1:1000, 1:1000, 5, 10),
check = "equal"
)
f1 = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
return(y)
}
f2 = function(x, y, lower, upper) {
which = x>lower & x < upper
y <- numeric(length(x))
y[which] <- (x[which]-y[which])/(x[which]+y[which])
return(y)
}
f1(1:1000, 1:1000, 5, 10)
f1(1:10, 1:10, 5, 10)
f1 = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
return(y)
}
f1(1:10, 1:10, 5, 10)
f1(1:10, 11:20, 5, 10)
f2(1:10, 11:20, 5, 10)
f1 = function(x, y, lower, upper) {
y <- (x-y)/(x+y)
y[x<=lower] = 0
y[x>=upper] = 0
return(y)
}
f2 = function(x, y, lower, upper) {
which = x > lower & x < upper
z <- numeric(length(x))
z[which] <- (x[which]-y[which])/(x[which]+y[which])
return(z)
}
microbenchmark::microbenchmark(
f1(1:1000, 1:1000, 5, 10),
f2(1:1000, 1:1000, 5, 10),
check = "equal"
)
microbenchmark::microbenchmark(
f1(1:10000, 1:10000, 5, 10),
f2(1:10000, 1:10000, 5, 10),
check = "equal"
)
microbenchmark::microbenchmark(
f1(1:10000, 1:10000, 5, 1000),
f2(1:10000, 1:10000, 5, 1000),
check = "equal"
)
microbenchmark::microbenchmark(
f1(1:10000, 1:10000, 1, 1000),
f2(1:10000, 1:10000, 1, 1000),
check = "equal"
)
microbenchmark::microbenchmark(
f1(1:10000, 1:10000, 100, 1000),
f2(1:10000, 1:10000, 100, 1000),
check = "equal"
)
microbenchmark::microbenchmark(
f1(1:10000, 1:10000, 800, 1000),
f2(1:10000, 1:10000, 800, 1000),
check = "equal"
)
seq(1e7)
seq(1e7)*10
microbenchmark::microbenchmark(
f1(seq(1e7), seq(1e7)*10, 800, 1000),
f2(seq(1e7), seq(1e7)*10, 800, 1000),
check = "equal"
)
microbenchmark::microbenchmark(
f1(seq(1e6), seq(1e6)*10, 800, 1000),
f2(seq(1e6), seq(1e6)*10, 800, 1000),
check = "equal"
)
install.packages("distributiona")
install.packages("distributional")
?distributional::dist_beta
dist <- dist_beta(shape1 = c(0.5, 5, 1, 2, 2), shape2 = c(0.5, 1, 3, 2, 5))
library(distributional)
dist <- dist_beta(shape1 = c(0.5, 5, -1, 2, 2), shape2 = c(0.5, 1, 3, 2, 5))
dist_beta
dist <- dist_beta(shape1 = c(0.5, 5, -1, 2, 2), shape2 = c(0.5, 1, 3, 2, 5))
dist <- dist_beta(shape1 = c(0.5, 5, 1, 2, 2), shape2 = c(0.5, 1, 3, 2, 5))
mean(dist)
library(distr6)
vd = rep(Binomial$new(), 100)
db = dist_binomial(rep(10, 100), rep(0.5, 100))
vd$mean()
mean(dv)
mean(db)
vd$mean()
mean(db)
microbenchmark::microbenchmark(vd$mean(), mean(db))
distributional:::mean.dist_binomial
db
db[["n"]]
distributional:::mean.dist_binomial
db[["p"]]
db["p"]
db
str(db)
dput(db)
d
dv
db
distributional:::mean.dist_binomial
distributional:::mean.dist_binomial(db)
db = dist_binomial(rep(10, 100), rep(0.5, 100))
distributional:::mean.distribution
distributional:::distr_apply
distributional:::dist_apply
mapply(dist_binomial, mean)
distributional:::vec_data(vd)
microbenchmark::microbenchmark(vd$mean(), mean(db))
vd$getParameterValue("size")
microbenchmark::microbenchmark(vd$getParameterValue("size"), mean(db))
vd$getParameterValue
vd$.__enclos_env__$private$.parameters$getParameterValue("size")
microbenchmark::microbenchmark(vd$.__enclos_env__$private$.parameters$getParameterValue("size"),
mean(db))
vd$.__enclos_env__$private$.parameters$getParameterValue
p = vd$.__enclos_env__$private$.parameters
p$getParameterValue("size")
as.data.table(p)
microbenchmark::microbenchmark(as.data.table(p),
mean(db))
distr6:::as.data.table.ParameterSetCollection
dist <-dist_beta()
dist <-dist_beta(1,2)
dist
variance(dist)
db = Beta$new(1, 2)
vb = dist_beta(1,2)
microbenchmark::microbenchmark(db$mean(), mean(vb))
db$mean
vb[["n"]]
str(vb)
vb[["shape1"]]
distributional:::mean.dist_beta
unlist(vb)
unlist(vb)[["shape1"]]
db$getParameterValue("shape1")
unlist(vb)[["shape1"]]
microbenchmark::microbenchmark(db$getParameterValue("shape1"),
unlist(vb)[["shape1"]])
db$getParameterValue
db$.__enclos_env__$private$.parameters$getParameterSupport("shape1")
db$.__enclos_env__$private$.parameters$getParameterValue("shape1")
db$.__enclos_env__$private$.parameters$getParameterValue
microbenchmark::microbenchmark(db$.__enclos_env__$private$.parameters$getParameterValue("shape1"),
unlist(vb)[["shape1"]])
microbenchmark::microbenchmark(db$.__enclos_env__$private$.parameters$parameters("shape1"),
unlist(vb)[["shape1"]])
db$.__enclos_env__$private$.parameters$parameters
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$private$.parameters("shape1"), id %in% "shape1"),
unlist(vb)[["shape1"]])
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$private$.parameters("shape1"), id %in% "shape1"),
unlist(vb)[["shape1"]])
db$.__enclos_env__$private$.parameters$private$.parameters("shape1")
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$private$.parameters, id %in% "shape1"),
unlist(vb)[["shape1"]]
)
db$.__enclos_env__$private$.parameters$private$.parameters
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters, id %in% "shape1"),
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters,
unlist(vb)[["shape1"]]
)
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1"]
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"]
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"][[1]]
as.numeric(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"])
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"]
as.numeric(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"][[1]])
microbenchmark::microbenchmark(
as.numeric(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"][[1]]),
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
as.numeric(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"][[1]]),
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"][[1]],
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"],
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id == "shape1", "value"],
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id %in% "shape1", "value"],
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters[id %in% "shape1", "value"],
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters, id %in% "shape1", select = "value"),
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters, id %in% "shape1", select = "value"),
unlist(vb)[["shape1"]]
)
microbenchmark::microbenchmark(
subset(db$.__enclos_env__$private$.parameters$.__enclos_env__$private$.parameters, id %in% "shape1",
select = "value"),
unlist(vb)[["shape1"]]
)
x = cranlogs::cran_downloads("distributional", from="2020-05-01")
plot(x$count)
sum(x$count)
x = cranlogs::cran_downloads("fable", from="2020-05-01")
sum(x$count)
`<-`
?`[<-`
x = c(a = 1, b = 2)
names(x)
"names<-"(x, letters[4:5])
x
x = 1:2
x
"[<-"(x,1,3)
x
?survreg
survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist='weibull',
scale=1)
library(survival)
survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist='weibull',
scale=1)
x=survreg(Surv(futime, fustat) ~ ecog.ps + rx, ovarian, dist='weibull',
scale=1)
x$scale
x$coefficients[1]
as.numeric(x$coefficients[1])
learner = lrn("surv.parametric", dist = "weibull", type = "aft")$train(task)
library(mlr3)
data(lung, package = "survival")
lung2 = lung
lung2$status = lung2$status - 1
lung2 = lung2[-14, c("time", "status", "ph.ecog")]
task = TaskSurv$new("param",
backend = lung2,
time = "time",
event = "status")
learner = lrn("surv.parametric", dist = "weibull", type = "aft")$train(task)
learner
learner$model
learner$model$basedist
predict(learner$model$fit, type = "quantile", p = 0.5, newdata = data.frame(1))
predict(learner$model$fit, type = "quantile", p = 0.5)
predict(learner$model$fit, type = "quantile", p = 0.5)[1]
learner$model$basedist$median()
learner$predict(task)
learner$predict(task)$distr[1]$median()
predict(learner$model$fit, type = "quantile", p = 0.5)[1]
learner$predict(task)$distr[1]$median()
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
library(testthat)
learner = lrn("surv.parametric", dist = "weibull")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "gaussian")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "weibull")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "gaussian")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "exponential")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "logistic")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "logistic")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median()) # fixme
learner = lrn("surv.parametric", dist = "lognormal")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "loglogistic")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median())
learner = lrn("surv.parametric", dist = "gaussian")$train(task)
expect_equal(predict(learner$model$fit, type = "quantile", p = 0.5)[1],
learner$predict(task)$distr[1]$median()) # fixme
survival::survreg
survival:::survreg.fit
?dnor
?dnorm
?survreg
tobinfit <- survreg(Surv(durable, durable>0, type='left') ~ age + quant,
data=tobin, dist='gaussian')
predict(tobinfit)
library(ggplot2)
set.seed(42)
p = ggplot(data = data.frame(x = 1:10, y = sort(runif(10), TRUE)), aes(x = x, y = y)) +
xlim(1, 10) + ylim(0, 1) + labs(x = "t", y = "S(t)")
p + geom_point()
p + geom_point() + theme_minimal()
library(ggplot2)
set.seed(42)
p = ggplot(data = data.frame(x = 1:10, y = sort(runif(10), TRUE)), aes(x = x, y = y)) +
xlim(1, 10) + ylim(0, 1) + labs(x = "T", y = "S(T)")
p + geom_point() + theme_minimal()
library(ggplot2)
set.seed(42)
p = ggplot(data = data.frame(x = 1:10, y = sort(runif(10), TRUE)), aes(x = x, y = y)) +
xlim(1, 10) + ylim(0, 1) + labs(x = "T", y = "S(T)")
p + geom_point() + theme_minimal()
dev.copy(png, "~/Desktop/car_surv_points.png", width = 6, height = 6, res = 100, units = "in")
dev.off()
p + geom_point() + geom_step() + theme_minimal()
dev.copy(png, "~/Desktop/car_surv_step.png", width = 6, height = 6, res = 100, units = "in")
dev.off()
p + geom_smooth(method = "loess") + theme_minimal()
dev.copy(png, "~/Desktop/car_surv_loess.png", width = 6, height = 6, res = 100, units = "in")
dev.off()
p + geom_smooth(method = "glm") + theme_minimal()
dev.copy(png, "~/Desktop/car_surv_glm.png", width = 6, height = 6, res = 100, units = "in")
dev.off()
